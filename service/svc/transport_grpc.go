// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 07f56d626f
// Version Date: 2020-12-21T21:40:22Z

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/techxmind/keyservice/interface-defs"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC KeyServiceServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.KeyServiceServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// keyservice

		encrypt: grpctransport.NewServer(
			endpoints.EncryptEndpoint,
			DecodeGRPCEncryptRequest,
			EncodeGRPCEncryptResponse,
			serverOptions...,
		),
		encryptbatch: grpctransport.NewServer(
			endpoints.EncryptBatchEndpoint,
			DecodeGRPCEncryptBatchRequest,
			EncodeGRPCEncryptBatchResponse,
			serverOptions...,
		),
		decrypt: grpctransport.NewServer(
			endpoints.DecryptEndpoint,
			DecodeGRPCDecryptRequest,
			EncodeGRPCDecryptResponse,
			serverOptions...,
		),
		decryptbatch: grpctransport.NewServer(
			endpoints.DecryptBatchEndpoint,
			DecodeGRPCDecryptBatchRequest,
			EncodeGRPCDecryptBatchResponse,
			serverOptions...,
		),
		keys: grpctransport.NewServer(
			endpoints.KeysEndpoint,
			DecodeGRPCKeysRequest,
			EncodeGRPCKeysResponse,
			serverOptions...,
		),
		ping: grpctransport.NewServer(
			endpoints.PingEndpoint,
			DecodeGRPCPingRequest,
			EncodeGRPCPingResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the KeyServiceServer interface
type grpcServer struct {
	encrypt      grpctransport.Handler
	encryptbatch grpctransport.Handler
	decrypt      grpctransport.Handler
	decryptbatch grpctransport.Handler
	keys         grpctransport.Handler
	ping         grpctransport.Handler
}

// Methods for grpcServer to implement KeyServiceServer interface

func (s *grpcServer) Encrypt(ctx context.Context, req *pb.EncryptRequest) (*pb.Response, error) {
	_, rep, err := s.encrypt.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.Response), nil
}

func (s *grpcServer) EncryptBatch(ctx context.Context, req *pb.EncryptBatchRequest) (*pb.BatchResponse, error) {
	_, rep, err := s.encryptbatch.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.BatchResponse), nil
}

func (s *grpcServer) Decrypt(ctx context.Context, req *pb.DecryptRequest) (*pb.Response, error) {
	_, rep, err := s.decrypt.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.Response), nil
}

func (s *grpcServer) DecryptBatch(ctx context.Context, req *pb.DecryptBatchRequest) (*pb.BatchResponse, error) {
	_, rep, err := s.decryptbatch.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.BatchResponse), nil
}

func (s *grpcServer) Keys(ctx context.Context, req *pb.KeyRequest) (*pb.KeyResponse, error) {
	_, rep, err := s.keys.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.KeyResponse), nil
}

func (s *grpcServer) Ping(ctx context.Context, req *pb.Empty) (*pb.Response, error) {
	_, rep, err := s.ping.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.Response), nil
}

// Server Decode

// DecodeGRPCEncryptRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC encrypt request to a user-domain encrypt request. Primarily useful in a server.
func DecodeGRPCEncryptRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.EncryptRequest)
	return req, nil
}

// DecodeGRPCEncryptBatchRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC encryptbatch request to a user-domain encryptbatch request. Primarily useful in a server.
func DecodeGRPCEncryptBatchRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.EncryptBatchRequest)
	return req, nil
}

// DecodeGRPCDecryptRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC decrypt request to a user-domain decrypt request. Primarily useful in a server.
func DecodeGRPCDecryptRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.DecryptRequest)
	return req, nil
}

// DecodeGRPCDecryptBatchRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC decryptbatch request to a user-domain decryptbatch request. Primarily useful in a server.
func DecodeGRPCDecryptBatchRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.DecryptBatchRequest)
	return req, nil
}

// DecodeGRPCKeysRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC keys request to a user-domain keys request. Primarily useful in a server.
func DecodeGRPCKeysRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.KeyRequest)
	return req, nil
}

// DecodeGRPCPingRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC ping request to a user-domain ping request. Primarily useful in a server.
func DecodeGRPCPingRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.Empty)
	return req, nil
}

// Server Encode

// EncodeGRPCEncryptResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain encrypt response to a gRPC encrypt reply. Primarily useful in a server.
func EncodeGRPCEncryptResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.Response)
	return resp, nil
}

// EncodeGRPCEncryptBatchResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain encryptbatch response to a gRPC encryptbatch reply. Primarily useful in a server.
func EncodeGRPCEncryptBatchResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.BatchResponse)
	return resp, nil
}

// EncodeGRPCDecryptResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain decrypt response to a gRPC decrypt reply. Primarily useful in a server.
func EncodeGRPCDecryptResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.Response)
	return resp, nil
}

// EncodeGRPCDecryptBatchResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain decryptbatch response to a gRPC decryptbatch reply. Primarily useful in a server.
func EncodeGRPCDecryptBatchResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.BatchResponse)
	return resp, nil
}

// EncodeGRPCKeysResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain keys response to a gRPC keys reply. Primarily useful in a server.
func EncodeGRPCKeysResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.KeyResponse)
	return resp, nil
}

// EncodeGRPCPingResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain ping response to a gRPC ping reply. Primarily useful in a server.
func EncodeGRPCPingResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.Response)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
