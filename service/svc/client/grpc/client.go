// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 07f56d626f
// Version Date: 2020-12-21T21:40:22Z

// Package grpc provides a gRPC client for the KeyService service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/techxmind/keyservice/interface-defs"
	"github.com/techxmind/keyservice/service/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.KeyServiceServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var encryptEndpoint endpoint.Endpoint
	{
		encryptEndpoint = grpctransport.NewClient(
			conn,
			"keyservice.KeyService",
			"Encrypt",
			EncodeGRPCEncryptRequest,
			DecodeGRPCEncryptResponse,
			pb.Response{},
			clientOptions...,
		).Endpoint()
	}

	var encryptbatchEndpoint endpoint.Endpoint
	{
		encryptbatchEndpoint = grpctransport.NewClient(
			conn,
			"keyservice.KeyService",
			"EncryptBatch",
			EncodeGRPCEncryptBatchRequest,
			DecodeGRPCEncryptBatchResponse,
			pb.BatchResponse{},
			clientOptions...,
		).Endpoint()
	}

	var decryptEndpoint endpoint.Endpoint
	{
		decryptEndpoint = grpctransport.NewClient(
			conn,
			"keyservice.KeyService",
			"Decrypt",
			EncodeGRPCDecryptRequest,
			DecodeGRPCDecryptResponse,
			pb.Response{},
			clientOptions...,
		).Endpoint()
	}

	var decryptbatchEndpoint endpoint.Endpoint
	{
		decryptbatchEndpoint = grpctransport.NewClient(
			conn,
			"keyservice.KeyService",
			"DecryptBatch",
			EncodeGRPCDecryptBatchRequest,
			DecodeGRPCDecryptBatchResponse,
			pb.BatchResponse{},
			clientOptions...,
		).Endpoint()
	}

	var keysEndpoint endpoint.Endpoint
	{
		keysEndpoint = grpctransport.NewClient(
			conn,
			"keyservice.KeyService",
			"Keys",
			EncodeGRPCKeysRequest,
			DecodeGRPCKeysResponse,
			pb.KeyResponse{},
			clientOptions...,
		).Endpoint()
	}

	var pingEndpoint endpoint.Endpoint
	{
		pingEndpoint = grpctransport.NewClient(
			conn,
			"keyservice.KeyService",
			"Ping",
			EncodeGRPCPingRequest,
			DecodeGRPCPingResponse,
			pb.Response{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		EncryptEndpoint:      encryptEndpoint,
		EncryptBatchEndpoint: encryptbatchEndpoint,
		DecryptEndpoint:      decryptEndpoint,
		DecryptBatchEndpoint: decryptbatchEndpoint,
		KeysEndpoint:         keysEndpoint,
		PingEndpoint:         pingEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCEncryptResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC encrypt reply to a user-domain encrypt response. Primarily useful in a client.
func DecodeGRPCEncryptResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.Response)
	return reply, nil
}

// DecodeGRPCEncryptBatchResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC encryptbatch reply to a user-domain encryptbatch response. Primarily useful in a client.
func DecodeGRPCEncryptBatchResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.BatchResponse)
	return reply, nil
}

// DecodeGRPCDecryptResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC decrypt reply to a user-domain decrypt response. Primarily useful in a client.
func DecodeGRPCDecryptResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.Response)
	return reply, nil
}

// DecodeGRPCDecryptBatchResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC decryptbatch reply to a user-domain decryptbatch response. Primarily useful in a client.
func DecodeGRPCDecryptBatchResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.BatchResponse)
	return reply, nil
}

// DecodeGRPCKeysResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC keys reply to a user-domain keys response. Primarily useful in a client.
func DecodeGRPCKeysResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.KeyResponse)
	return reply, nil
}

// DecodeGRPCPingResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC ping reply to a user-domain ping response. Primarily useful in a client.
func DecodeGRPCPingResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.Response)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCEncryptRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain encrypt request to a gRPC encrypt request. Primarily useful in a client.
func EncodeGRPCEncryptRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.EncryptRequest)
	return req, nil
}

// EncodeGRPCEncryptBatchRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain encryptbatch request to a gRPC encryptbatch request. Primarily useful in a client.
func EncodeGRPCEncryptBatchRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.EncryptBatchRequest)
	return req, nil
}

// EncodeGRPCDecryptRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain decrypt request to a gRPC decrypt request. Primarily useful in a client.
func EncodeGRPCDecryptRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.DecryptRequest)
	return req, nil
}

// EncodeGRPCDecryptBatchRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain decryptbatch request to a gRPC decryptbatch request. Primarily useful in a client.
func EncodeGRPCDecryptBatchRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.DecryptBatchRequest)
	return req, nil
}

// EncodeGRPCKeysRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain keys request to a gRPC keys request. Primarily useful in a client.
func EncodeGRPCKeysRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.KeyRequest)
	return req, nil
}

// EncodeGRPCPingRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain ping request to a gRPC ping request. Primarily useful in a client.
func EncodeGRPCPingRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.Empty)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
